SELECT

Selezionare tutte le software house americane (3)

SELECT *
FROM software_houses sh
WHERE country LIKE 'United States'

Selezionare tutti i giocatori della cittÃ di 'Rogahnland' (2)

SELECT *
FROM players p 
WHERE city LIKE 'Rogahnland'

Selezionare tutti i giocatori il cui nome finisce per "a" (220)

SELECT *
FROM players p 
WHERE name LIKE  '%a'

Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)

SELECT *
FROM reviews
WHERE player_id = 800;

Contare quanti tornei ci sono stati nell'anno 2015 (9)

SELECT *
FROM tournaments
WHERE year = 2015

Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)

SELECT *
FROM awards
WHERE description LIKE '%facere%'

Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)

SELECT DISTINCT videogame_id 
FROM category_videogame cv 
WHERE category_id = 2
OR category_id = 6;

Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)

SELECT *
FROM reviews r
WHERE rating >= 2 AND rating <= 4;

Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)

SELECT *
FROM videogames v
WHERE release_date BETWEEN '2020-01-01' AND '2020-12-31';

SELECT *
FROM videogames v 
WHERE YEAR(release_date) = 2020; 

Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da 5 stelle, mostrandoli una sola volta (443)

SELECT DISTINCT v.id
FROM videogames v
INNER JOIN reviews r ON v.id = r.videogame_id
WHERE r.rating = 5;

SELECT DISTINCT v.id
FROM videogames v
WHERE v.id IN (SELECT videogame_id FROM reviews WHERE rating = 5);
// non pensavo si potesse fare un in con dentro altro select nella WHERE

SELECT DISTINCT videogame_id 
FROM reviews r 
WHERE rating >= 5;
// ancora meglio

BONUS

Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)

SELECT COUNT(r.id) AS review_number, AVG(r.rating) AS avg_rating
FROM videogames v
INNER JOIN reviews r ON v.id = r.videogame_id
WHERE v.id = 412;

senza inner
SELECT COUNT(r.id) AS review_number, AVG(r.rating) AS avg_rating
FROM reviews r
WHERE r.videogame_id = 412;

SELECT COUNT(*), AVG(rating)
FROM reviews r 
WHERE videogame_id = 412

// trovo più chiaro il secondo esempio, dove prendo direttamente col where il gioco interessato

SELECT COUNT(*) AS review_number, AVG(rating) AS avg_rating
FROM reviews r
WHERE videogame_id = 412;

Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)

SELECT COUNT(*) AS videogame_number
FROM videogames v
WHERE v.software_house_id = 1
AND v.release_date BETWEEN '2018-01-01' AND '2018-12-31';

-------------------------------------------

GROUP BY

Contare quante software house ci sono per ogni paese (3)

SELECT country, COUNT(*) AS software_house_number
FROM software_houses sh 
GROUP BY country;

Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)

SELECT v.id, COUNT(*) AS review_number
FROM videogames v
INNER JOIN reviews r ON v.id = r.videogame_id
GROUP BY v.id;

SELECT videogame_id, COUNT(*)
FROM reviews r 
GROUP BY videogame_id;

Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)

SELECT pegi_label_id, COUNT(*) 
FROM pegi_label_videogame plv 
GROUP BY pegi_label_id;

Mostrare il numero di videogiochi rilasciati ogni anno (11)

SELECT YEAR(release_date), COUNT(*)
FROM videogames v
GROUP BY YEAR(release_date);

Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)

SELECT device_id, COUNT(*)
FROM device_videogame dv 
GROUP BY device_id;

Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)

SELECT videogame_id, AVG(rating) 'avgRating'
FROM reviews r 
GROUP BY videogame_id 
ORDER BY avgRating DESC;

-------------------------------------------

JOIN

Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)

SELECT DISTINCT p.*
FROM reviews r 
	JOIN players p 
		ON r.player_id = p.id;

Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)

SELECT DISTINCT v.*
FROM tournaments t 
	JOIN tournament_videogame tv 
		ON t.id = tv.tournament_id 
	JOIN videogames v 
		ON tv.videogame_id = v.id
WHERE t.`year` = 2016;

Mostrare le categorie di ogni videogioco (1718)

SELECT v.id, v.name, c.name
FROM videogames v
INNER JOIN category_videogame cv ON v.id = cv.videogame_id
INNER JOIN categories c ON cv.category_id = c.id;

SELECT v.name, c.name 
FROM videogames v 
	JOIN category_videogame cv
		ON v.id = cv.videogame_id 
	JOIN categories c 
		ON cv.category_id = c.id;

Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)

SELECT s.id, s.name, s.country
FROM software_houses s
LEFT JOIN videogames v ON s.id = v.software_house_id
WHERE v.release_date > '2020-12-31'
GROUP BY s.id, s.name, s.country
HAVING COUNT(*) > 0;

SELECT DISTINCT sh.*
FROM videogames v 
	JOIN software_houses sh 
		ON v.software_house_id = sh.id 
WHERE YEAR(v.release_date) >= 2020;

Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)

SELECT sh.*, a.*
FROM software_houses sh 
	JOIN videogames v 
		ON sh.id = v.software_house_id 
	JOIN award_videogame av 
		ON v.id = av.videogame_id 
	JOIN awards a 
		ON av.award_id = a.id;

Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)

SELECT DISTINCT v.name, c.name, pl.name 
FROM videogames v 
	JOIN reviews r 
		ON v.id = r.videogame_id 
	JOIN category_videogame cv 
		ON v.id = cv.videogame_id 
	JOIN categories c 
		ON cv.category_id = c.id 
	JOIN pegi_label_videogame plv 
		ON v.id = plv.videogame_id 
	JOIN pegi_labels pl 
		ON plv.pegi_label_id = pl.id
WHERE r.rating >= 4;

Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)

SELECT DISTINCT v.id, v.name 
FROM players p 
	JOIN player_tournament pt 
		ON p.id = pt.player_id 
	JOIN tournaments t 
		ON pt.tournament_id = t.id 
	JOIN tournament_videogame tv 
		ON t.id = tv.tournament_id 
	JOIN videogames v 
		ON tv.videogame_id = v.id 
WHERE p.name LIKE 's%';

Selezionare le cittÃ in cui Ã¨ stato giocato il gioco dell'anno del 2018 (36)

SELECT DISTINCT t.city 
FROM awards a 
	JOIN award_videogame av 
		ON a.id = av.award_id 
	JOIN videogames v 
		ON av.videogame_id = v.id
	JOIN tournament_videogame tv 
		ON v.id = tv.videogame_id 
	JOIN tournaments t 
		ON tv.tournament_id = t.id 
WHERE a.name LIKE "gioco dell'anno"
	AND av.`year` = 2018;

Selezionare i giocatori che hanno giocato al gioco piu' atteso del 2018 in un torneo del 2019 (3306 = NO DISTINCT; 991 = DISTINCT)

SELECT p.*
FROM awards a
	JOIN award_videogame av 
		ON a.id = av.award_id 
	JOIN videogames v 
		ON av.videogame_id = v.id
	JOIN tournament_videogame tv 
		ON v.id = tv.videogame_id 
	JOIN tournaments t 
		ON tv.tournament_id = t.id 
	JOIN player_tournament pt 
		ON t.id = pt.tournament_id 
	JOIN players p 
		ON pt.player_id = p.id
WHERE a.name LIKE 'Gioco più atteso'
	AND av.`year` = 2018
	AND t.`year` = 2019;

SELECT DISTINCT p.*
FROM awards a
	JOIN award_videogame av 
		ON a.id = av.award_id 
	JOIN videogames v 
		ON av.videogame_id = v.id
	JOIN tournament_videogame tv 
		ON v.id = tv.videogame_id 
	JOIN tournaments t 
		ON tv.tournament_id = t.id 
	JOIN player_tournament pt 
		ON t.id = pt.tournament_id 
	JOIN players p 
		ON pt.player_id = p.id
WHERE a.name LIKE 'Gioco più atteso'
	AND av.`year` = 2018
	AND t.`year` = 2019;

BONUS

Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)

SELECT *
FROM videogames v 
	JOIN software_houses sh 
		ON v.software_house_id = sh.id 
ORDER BY release_date 
LIMIT 1;

Selezionare i dati del videogame (id, name, release_date, totale recensioni) con piÃ¹ recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)

-- VER 1
SELECT v.id, v.name, COUNT(*) 'revCount'
FROM  videogames v 
	JOIN reviews r 
		ON v.id = r.videogame_id 
GROUP BY v.id
ORDER BY revCount DESC 
LIMIT 1;

-- VER 2: ADV
SELECT v.id, v.name, COUNT(*) 'revCount'
FROM  videogames v 
	JOIN reviews r 
		ON v.id = r.videogame_id 
GROUP BY v.id
HAVING revCount = (
	SELECT COUNT(*) 'revCount'
	FROM  videogames v 
		JOIN reviews r 
			ON v.id = r.videogame_id 
	GROUP BY v.id
	ORDER BY revCount DESC 
	LIMIT 1
)

Selezionare la software house che ha vinto piÃ¹ premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)

-- VER 1
SELECT sh.id, sh.name, COUNT(*) 'awCount'
FROM award_videogame av 
	JOIN videogames v 
		ON av.videogame_id = v.id 
	JOIN software_houses sh 
		ON v.software_house_id = sh.id
WHERE av.`year` >= 2015
	AND av.`year` <= 2016
GROUP BY sh.id
ORDER BY awCount DESC 
LIMIT 1;

-- VER 2: ADV
SELECT sh.id, sh.name, COUNT(*) 'awCount'
FROM award_videogame av 
	JOIN videogames v 
		ON av.videogame_id = v.id 
	JOIN software_houses sh 
		ON v.software_house_id = sh.id
WHERE av.`year` >= 2015
	AND av.`year` <= 2016
GROUP BY sh.id
HAVING awCount = (
	SELECT COUNT(*) 'awCount'
	FROM award_videogame av 
		JOIN videogames v 
			ON av.videogame_id = v.id 
		JOIN software_houses sh 
			ON v.software_house_id = sh.id
	WHERE av.`year` >= 2015
		AND av.`year` <= 2016
	GROUP BY sh.id
	ORDER BY awCount DESC 
	LIMIT 1
);

Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 2 (10)

SELECT DISTINCT c.name
FROM categories c
	JOIN category_videogame cv 
		ON c.id = cv.category_id
	JOIN videogames v 
		ON cv.videogame_id = v.id
	JOIN (
	    SELECT r.videogame_id, AVG(r.rating) AS avg_rating
	    FROM reviews r
	    GROUP BY r.videogame_id
	) AS temp_table 
		ON v.id = temp_table.videogame_id
WHERE temp_table.avg_rating < 2;